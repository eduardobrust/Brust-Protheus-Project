#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include "msobject.ch"
#include "totvs.ch"

/*
EDUARDO BRUST - HOMOLOGADO NA RELEASE 12.1.2310
Descrição:

A API nApiGab.cApiFunctionCompany expõe a tabelFUNCTION_COMPANYSA do sistema Protheus. 
Retorna um JSON com os dados da tabela, filtrando os resultados de acordo com os parâmetros fornecidos.

Detalhes:
A API herda a classe nGab.cFunctionCompany, que fornece os métodos para acessar os dados da tabela.
A API implementa um polimorfismo atraves do contrato com a iApiFunctionCompany para expor uma nova classe nApiGab.cApiFunctionCompany.
Os parâmetros fornecidos na solicitação determinam como os dados da tabela são filtrados.

Exemplos de uso:

Para listar todas as rotinas para todas as empresas, use a seguinte URL:
https://localhost:porta/tlpp/cfg/v1/cApiFunctionCompany

Para listar todas as rotinas para a COMPANY com o código 330101, use a seguinte URL:
https://localhost:porta/tlpp/cfg/v1/cApiFunctionCompany?COMPANY=330101

Para listar todas as rotinas ativas para todas as empresas, use a seguinte URL:
https://localhost:porta/tlpp/cfg/v1/cApiFunctionCompany?ativo=S
*/

//Definindo o namespace para a classe
namespace nApiGab

Interface iApiFunctionCompany

public method GetApiFunctionCompany() as json 	//api get para consulta dos dados
public method PostApiFunctionCompany() as json	//api post para insert dos dados
public method PatchApiFunctionCompany() as json	//api patch para update dos dados

Private method UpdateFunctionCompany()  //realiza o update no banco
Private method InsertFunctionCompany()  //realiza o insert no banco

EndInterface

/*/ cApiFunctionCompany
Classe que herda a clase nGab.cFunctionCompany com seus métodos e implementa um polimorfismo expondo uma nova classe nApiGab.cApiFunctionCompany
@type classe
@version 12.1.2310
@author eduardo.brust
@since 10/27/2023
/*/
class cApiFunctionCompany from nGab.cFunctionCompany Implements iApiFunctionCompany

	private data cToken 	as Character
	private data cFunction 	as Character
	private data cCompany 	as Character
	private data cAllBranches	as Character
	private data cActive 	as Character
	private data cAbbreviation 	as Character
	private data jQuery		as json
	private data jHeader	as json
	private data jBody		as json
	Private data cMenRet	as variant		//guardo a mensagem de retorno da api
	Private data jRetorno	as json		    //monto o json de retorno da api

	public method New() as object

	//annotation deve ficar na implementação do metódo da classe e não da interface.
	@Get(endpoint='tlpp/cfg/v1/cApiFunctionCompany',description='Consulta registro na Tabela FUNCTION_COMPANY')
	public method GetApiFunctionCompany() as json

	@Post(endpoint='tlpp/cfg/v1/cApiFunctionCompany',description='Inclui registro na Tabela FUNCTION_COMPANY')
	public method PostApiFunctionCompany() as json

	@Patch(endpoint='tlpp/cfg/v1/cApiFunctionCompany',description='Altera registro na Tabela FUNCTION_COMPANY')
	public method PatchApiFunctionCompany() as json

	Private method UpdateFunctionCompany()

	Private method InsertFunctionCompany()

endclass


/*/{Protheus.doc} cApiFunctionCompany::new() as object
Metodo construtor
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/27/2023
return Self, retorna um objeto
/*/
method new() as object class cApiFunctionCompany
	::cToken		:= ''
	::cFunction		:= ''
	::cCompany		:= ''
	::cAllBranches		:= ''
	::cActive		:= ''
	::cAbbreviation		:= ''
	::jQuery 		:= Nil
	::jHeader		:= Nil
	::jBody			:= Nil
	::cMenRet		:= ''
	::jRetorno		:= Nil
return Self


/*/{Protheus.doc} cApiFunctionCompany::GetApiFunctionCompany() as json
Metodo Get para consulta a tabela FUNCTION_COMPANY
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/28/2023
@return variant, return_um objeto
/*/
method GetApiFunctionCompany() as json class cApiFunctionCompany
	Local lRet			:= .T. 	as logical
	Local lAllBranches		:= .T. 	as logical

	::jQuery := oRest:getQueryRequest()
	if ( ::jQuery <> Nil )
		::cToken := ::jQuery[ 'cToken' ]
		if ( valtype(::cToken) == 'U' )
			::cToken := ''
		endif

		::cFunction := ::jQuery[ 'cFunction' ]
		if ( valtype(::cFunction) == 'U' )
			::cFunction := ''
		endif

		::cCompany := ::jQuery[ 'cCompany' ]
		if ( valtype(::cCompany) == 'U' )
			::cCompany := ''
		endif

		::cAllBranches := ::jQuery[ 'cAllBranches' ]
		if ( valtype(::cAllBranches) == 'U' )
			lAllBranches := .T.
		elseif ::cAllBranches == '1'
			lAllBranches := .T.
		elseif ::cAllBranches == '0'
			lAllBranches := .F.
		endif

		::cActive := ::jQuery[ 'cActive' ]
		if ( valtype(::cActive) == 'U' )
			::cActive := 'Y'
		endif

		::cAbbreviation := ::jQuery[ 'cAbbreviation' ]
		if ( valtype(::cAbbreviation) == 'U' )
			::cAbbreviation := ''
		endif
	endif

	if lRet
		If .F. // !U_VTOKEN(::cToken) // VALIDO SE TOKEN E VALIDO RETIRAR DEPOIS DOS TESTES
			lRet := .F.

			::jRetorno := {"error": "Invalid Token", "code": 401}
			oRest:setStatusCode( 401 )
		endif
	endif

	if lRet
		::jRetorno := ::getFunctionCompany(cFunction = ::cFunction,lAllBranches = lAllBranches ,cCompany = ::cCompany,cActive = ::cActive,cAbbreviation = ::cAbbreviation) //usando parametros nomeados

		//verifico se recurso foi encontrado.
		if valtype(::jRetorno) == 'J' .AND. ::jRetorno:HasProperty("companies")
			if len(::jRetorno["companies"]) <= 0

				::jRetorno := {"error": "Resource not found", "code": 404}
				oRest:setStatusCode( 404 )
			endif
		endif
	endif

	lRet := oRest:setKeyHeaderResponse("Content-Type", "application/json")

return oRest:setResponse( ::jRetorno )


/*/{Protheus.doc} cApiFunctionCompany::PatchApiFunctionCompany() as json
Metodo Patch para atualizacao de registros na tabela FUNCTION_COMPANY
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/29/2023
@return variant, return_um objeto
/*/
method PatchApiFunctionCompany() as json class cApiFunctionCompany
	Local lRet	:= .T. 	as logical

	::jHeader := oRest:getHeaderRequest()
	if ( ::jHeader <> Nil )
		::cToken := ::jHeader[ 'Authorization' ]
	endif

	if lRet
		If .F. // !U_VTOKEN(::cToken) // VALIDO SE TOKEN E VALIDO RETIRAR DEPOIS DOS TESTES
			lRet := .F.
			::jRetorno := {"error": "Invalid Token", "code": 401}
			oRest:setStatusCode( 401 )
		endif
	endif

	if lRet
		::jBody := JsonObject():new()
		::jBody:fromJson( oRest:GetBodyRequest() )
		if !( ::jBody:HasProperty("itens") )
			lRet := .F.
			::jRetorno := {"erro": "Bad Request", "code": 400}
			oRest:setStatusCode( 400 )
		endif
	endif

	if lRet
		::UpdateFunctionCompany()
	endif

	lRet := oRest:setKeyHeaderResponse("Content-Type", "application/json")

return oRest:setResponse( ::jRetorno )


/*/{Protheus.doc} cApiFunctionCompany::PostApiFunctionCompany() as json
Metodo Post para inclusao de registros na tabela FUNCTION_COMPANY
@type method
@version 12.1.2310
@author Eduardo Brust
@since 11/12/2023
@return variant, return_um objeto
/*/
method PostApiFunctionCompany() as json class cApiFunctionCompany

	Local lRet	:= .T. 	as logical

	::jHeader := oRest:getHeaderRequest()
	if ( ::jHeader <> Nil )
		::cToken := ::jHeader[ 'Authorization' ]
	endif

	if lRet
		If .F. // !U_VTOKEN(::cToken) // VALIDO SE TOKEN E VALIDO RETIRAR DEPOIS DOS TESTES
			lRet := .F.
			::jRetorno := {"error": "Invalid Token", "code": 401}
			oRest:setStatusCode( 401 )
		endif
	endif

	if lRet
		::jBody := JsonObject():new()
		::jBody:fromJson( oRest:GetBodyRequest() )
		if !( ::jBody:HasProperty("itens") )
			lRet := .F.
			::jRetorno := {"erro": "Bad Request", "code": 400}
			oRest:setStatusCode( 400 )
		endif
	endif

	if lRet
		::InsertFunctionCompany()
	endif

	lRet := oRest:setKeyHeaderResponse("Content-Type", "application/json")

return oRest:setResponse( ::jRetorno )


/*/{Protheus.doc} cApiFunctionCompany::UpdateFunctionCompany()
Altera registros na tabela FUNCTION_COMPANY
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/29/2023
/*/
method UpdateFunctionCompany() class cApiFunctionCompany
	Local cUpdate	:= ""	as character
	local nStatus	:=	0	as numeric
	Local i					as numeric
	local nErro		:=	0	as numeric
	Local cFunction := cCompany := cAbbreviation := cActive := "" as character

	FOR I:= 1 TO len(::jBody["itens"])

		cFunction := IIF(::jBody["itens"][I]:GetJsonText("cFunction") == "null",'', ::jBody["itens"][I]:GetJsonText("cFunction"))
		cCompany := IIF(::jBody["itens"][I]:GetJsonText("cCompany") == "null",'', ::jBody["itens"][I]:GetJsonText("cCompany"))
		cAbbreviation := IIF(::jBody["itens"][I]:GetJsonText("cAbbreviation") == "null",'', ::jBody["itens"][I]:GetJsonText("cAbbreviation"))
		cActive := IIF(::jBody["itens"][I]:GetJsonText("cActive") == "null",'', ::jBody["itens"][I]:GetJsonText("cActive"))

		cFunction := UPPER(ALLTRIM(cFunction))
		cCompany := ALLTRIM(cCompany)
		cAbbreviation := UPPER(ALLTRIM(cAbbreviation))
		cActive := UPPER(ALLTRIM(cActive))

		IF !EMPTY(cFunction) .AND. !EMPTY(cCompany) .AND. (!EMPTY(cAbbreviation) .OR.!EMPTY(cActive) )
			cUpdate := ""
			cUpdate += " UPDATE FUNCTION_COMPANY SET 		"+ CRLF
			IF !EMPTY(cAbbreviation).AND. !EMPTY(cActive) .AND. cActive $ 'Y/N'
				cUpdate += "   ABBREVIATION = '" + cAbbreviation + "', 	"+ CRLF
				cUpdate += "   ACTIVE = '"+ cActive + "' 	"+ CRLF
			ELSEIF !EMPTY(cAbbreviation)
				cUpdate += "   ABBREVIATION = '" + cAbbreviation + "'	"+ CRLF
			ELSEIF !EMPTY(cActive)
				cUpdate += "   ACTIVE = '" + cActive + "'	"+ CRLF
			ENDIF
			cUpdate += " WHERE  UPPER(TRIM(CFUNCTION)) = '" + cFunction + "' 	"+ CRLF
			cUpdate += " AND  TRIM(COMPANY) = '" + cCompany + "' 	"+ CRLF

			nStatus := TCSQLExec(cUpdate)
			if nStatus < 0
				nErro++
			endif
		ENDIF
	NEXT

	if nErro > 0
		::jRetorno := {"erro": "Erro ao atualizar registros", "company": 500}
		oRest:setStatusCode( 500 )
	else
		::jRetorno := {"msg": "Sucesso", "company": 200}
		oRest:setStatusCode( 200 )
	endif
return


/*/{Protheus.doc} cApiFunctionCompany::InsertFunctionCompany
Inclui registros na tabela FUNCTION_COMPANY
@type method
@version 12.1.2310
@author Eduardo Brust
@since 11/12/2023
/*/
method InsertFunctionCompany() class cApiFunctionCompany
	Local cInsert	:= ""	as character
	local nStatus	:=	0	as numeric
	Local i					as numeric
	local nErro		:=	0	as numeric
	local lInsert	:= .F.	as logical
	Local _cQry 	:= "" 	as Character
	Local cTrb1				as Character
	Local cFunction := cCompany := cAbbreviation := cActive := "" as character

	FOR I:= 1 TO len(::jBody["itens"])

		cFunction := IIF(::jBody["itens"][I]:GetJsonText("cFunction") == "null",'', ::jBody["itens"][I]:GetJsonText("cFunction"))
		cCompany := IIF(::jBody["itens"][I]:GetJsonText("cCompany") == "null",'', ::jBody["itens"][I]:GetJsonText("cCompany"))
		cAbbreviation := IIF(::jBody["itens"][I]:GetJsonText("cAbbreviation") == "null",'', ::jBody["itens"][I]:GetJsonText("cAbbreviation"))
		cActive := IIF(::jBody["itens"][I]:GetJsonText("cActive") == "null",'', ::jBody["itens"][I]:GetJsonText("cActive"))

		cFunction := UPPER(ALLTRIM(cFunction))
		cCompany := ALLTRIM(cCompany)
		cAbbreviation := UPPER(ALLTRIM(cAbbreviation))
		cActive := UPPER(ALLTRIM(cActive))

		lInsert	:= .F.
		_cQry	:= " " +CRLF									
		_cQry += " SELECT M0_CODIGO 					" +CRLF
		_cQry += " FROM SYS_COMPANY 					" +CRLF
		_cQry += " WHERE  D_E_L_E_T_ = ' ' 				" +CRLF
		_cQry += " AND M0_CODIGO = '" + cCompany + "'   " +CRLF
		_cQry += " AND ROWNUM = 1 						" +CRLF

		cTrb1 := MpSysOpenQuery(_cQry)

		IF (cTrb1)->(!Eof())
			lInsert	:= .T.
		ELSE
			nErro++
		ENDIF

		//FECHO A AREA ABERTA PELA QUERY
		If Select(cTrb1) > 0 .AND. !EMPTY(cTrb1)
			(cTrb1)->(DbCloseArea())
			cTrb1	:= ""
		endif

		IF !EMPTY(cFunction) .AND. !EMPTY(cCompany) .AND. !EMPTY(cAbbreviation) .AND.!EMPTY(cActive) .AND. lInsert
			cInsert := ""
			cInsert += " INSERT INTO FUNCTION_COMPANY (CFUNCTION, COMPANY, ABBREVIATION, ACTIVE) VALUES " + CRLF
			cInsert += "('" + cFunction + "', '" + cCompany + "', '" + cAbbreviation + "', '" + cActive + "')" + CRLF
			//cInsert += " IF NOT EXISTS (SELECT 1 FROM FUNCTION_COMPANY WHERE UPPER(TRIM(CFUNCTION)) = '" + cFunction + "' AND TRIM(COMPANY) = '" + cCompany + "')"

			nStatus := TCSQLExec(cInsert)
			if nStatus < 0
				nErro++
			endif
		ENDIF
	NEXT

	if nErro > 0
		::jRetorno := {"erro": "Erro ao inserir registros", "company": 500}
		oRest:setStatusCode( 500 )
	else
		::jRetorno := {"msg": "Sucesso", "company": 200}
		oRest:setStatusCode( 200 )
	endif
return

/*

https://tdn.totvs.com/display/tec/Reflection+e+Annotation

1. GET:
   - 200 (OK): A solicitação foi bem-sucedida e o corpo da resposta contém os dados solicitados.
   - 404 (Not Found): O recurso solicitado não foi encontrado.
   - 401 Unauthorized - Solicitacao recusada devido credenciais inválidas ou ausentes

2. POST:
   - 201 (Created): A solicitação foi bem-sucedida e um novo recurso foi criado.
   - 400 (Bad Request): A solicitação não pôde ser entendida ou contém parâmetros inválidos.
   - 409 (Conflict): O servidor detectou um conflito durante o processamento da solicitação, como um conflito de duplicação de recursos.

3. PUT:
   - 200 (OK): A solicitação foi bem-sucedida e o recurso foi atualizado.
   - 400 (Bad Request): A solicitação não pôde ser entendida ou contém parâmetros inválidos.
   - 404 (Not Found): O recurso a ser atualizado não foi encontrado.

4. PATCH:
   - 200 (OK): A solicitação foi bem-sucedida e o recurso foi atualizado.
   - 204 (No Content): A solicitação foi bem-sucedida e o recurso foi atualizado.
   - 400 (Bad Request): A solicitação não pôde ser entendida ou contém parâmetros inválidos.
   - 404 (Not Found): O recurso a ser atualizado não foi encontrado.

5. DELETE:
   - 204 (No Content): A solicitação foi bem-sucedida e o recurso foi excluído.
   - 404 (Not Found): O recurso a ser excluído não foi encontrado.

*/
