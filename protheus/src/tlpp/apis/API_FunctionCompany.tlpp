#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include "msobject.ch"
#include "totvs.ch"

/*
EDUARDO BRUST - HOMOLOGADO NA RELEASE 12.1.2310
Descrição:

A API nApiGab.cApiFunctionCompany expõe a tabela ROTINA_EMPRESA do sistema Protheus. 
Retorna um JSON com os dados da tabela, filtrando os resultados de acordo com os parâmetros fornecidos.

Detalhes:
A API herda a classe nGab.cFunctionCompany, que fornece os métodos para acessar os dados da tabela.
A API implementa um polimorfismo atraves do contrato com a iApiFunctionCompany para expor uma nova classe nApiGab.cApiFunctionCompany.
Os parâmetros fornecidos na solicitação determinam como os dados da tabela são filtrados.

Exemplos de uso:

Para listar todas as rotinas para todas as empresas, use a seguinte URL:
https://localhost:porta/tlpp/cfg/v1/cApiFunctionCompany

Para listar todas as rotinas para a COMPANY com o código 330101, use a seguinte URL:
https://localhost:porta/tlpp/cfg/v1/cApiFunctionCompany?COMPANY=330101

Para listar todas as rotinas ativas para todas as empresas, use a seguinte URL:
https://localhost:porta/tlpp/cfg/v1/cApiFunctionCompany?ativo=S
*/

//Definindo o namespace para a classe
namespace nApiGab

Interface iApiFunctionCompany

public method GetApiConsultaFunctionCompany() as json
public method PostApiIncluiFunctionCompany() as json
public method PatchApiAlteraFunctionCompany() as json

Private method AlteraFunctionCompany() as json

EndInterface

/*/ cApiFunctionCompany
Classe que herda a clase nGab.cFunctionCompany com seus métodos e implementa um polimorfismo expondo uma nova classe nApiGab.cApiFunctionCompany
@type classe
@version 12.1.2310
@author eduardo.brust
@since 10/27/2023
/*/
class cApiFunctionCompany from nGab.cFunctionCompany Implements iApiFunctionCompany

	private data cToken 	as Character
	private data cFunction 	as Character
	private data cCompany 	as Character
	private data cFullEmp	as Character
	private data cAtivo 	as Character
	private data cSigla 	as Character
	private data jQuery		as json
	private data jHeader	as json
	private data jBody		as json
	Private data cMenRet	as variant		//guardo a mensagem de retorno da api
	Private data jRetorno	as json		    //monto o json de retorno da api

	public method New() as object

	//annotation deve ficar na implementação do metódo da classe e não da interface.
	@Get(endpoint='tlpp/cfg/v1/cApiFunctionCompany',description='Consulta registro na Tabela ROTINA_EMPRESA')
	public method GetApiConsultaFunctionCompany() as json

	@Post(endpoint='tlpp/cfg/v1/cApiFunctionCompany',description='Inclui registro na Tabela ROTINA_EMPRESA')
	public method PostApiIncluiFunctionCompany() as json

	@Patch(endpoint='tlpp/cfg/v1/cApiFunctionCompany',description='Altera registro na Tabela ROTINA_EMPRESA')
	public method PatchApiAlteraFunctionCompany() as json

	Private method AlteraFunctionCompany()

endclass


/*/{Protheus.doc} cApiFunctionCompany::new() as object
Metodo construtor
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/27/2023
return Self, retorna um objeto
/*/
method new() as object class cApiFunctionCompany
	::cToken		:= ''
	::cFunction		:= ''
	::cCompany		:= ''
	::cFullEmp		:= ''
	::cAtivo		:= ''
	::cSigla		:= ''
	::jQuery 		:= Nil
	::jHeader		:= Nil
	::jBody			:= Nil
	::cMenRet		:= ''
	::jRetorno		:= Nil
return Self


/*/{Protheus.doc} cApiFunctionCompany::GetApiConsultaFunctionCompany() as json
Metodo Get para consulta a tabela ROTINA_EMPRESA
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/28/2023
@return variant, return_um objeto
/*/
method GetApiConsultaFunctionCompany() as json class cApiFunctionCompany
	Local lRet			:= .T. 	as logical
	Local lFullEmp		:= .T. 	as logical

	::jQuery := oRest:getQueryRequest()
	if ( ::jQuery <> Nil )
		::cToken := ::jQuery[ 'cToken' ]
		if ( valtype(::cToken) == 'U' )
			::cToken := ''
		endif

		::cFunction := ::jQuery[ 'cFunction' ]
		if ( valtype(::cFunction) == 'U' )
			::cFunction := ''
		endif

		::cCompany := ::jQuery[ 'cCompany' ]
		if ( valtype(::cCompany) == 'U' )
			::cCompany := ''
		endif

		::cFullEmp := ::jQuery[ 'cFullEmp' ]
		if ( valtype(::cFullEmp) == 'U' )
			lFullEmp := .T.
		elseif ::cFullEmp == '1'
			lFullEmp := .T.
		elseif ::cFullEmp == '0'
			lFullEmp := .F.
		endif

		::cAtivo := ::jQuery[ 'cAtivo' ]
		if ( valtype(::cAtivo) == 'U' )
			::cAtivo := 'S'
		endif

		::cSigla := ::jQuery[ 'cSigla' ]
		if ( valtype(::cSigla) == 'U' )
			::cSigla := ''
		endif
	endif

	if lRet
		If .F. // !U_VTOKEN(::cToken) // VALIDO SE TOKEN E VALIDO RETIRAR DEPOIS DOS TESTES
			lRet := .F.

			::jRetorno := {"erro": "Token inválido", "codigo": 401}
			oRest:setStatusCode( 401 )
		endif
	endif

	if lRet
		::jRetorno := ::GETConsultaFunctionCompany(cFunction = ::cFunction,lFullEmp = lFullEmp ,cCompany = ::cCompany,cAtivo = ::cAtivo,cSigla = ::cSigla) //usando parametros nomeados

		//verifico se recurso foi encontrado.
		if valtype(::jRetorno) == 'J'
			if len(::jRetorno["empresas"]) <= 0

				::jRetorno := {"erro": "Recurso não encontrado", "codigo": 404}
				oRest:setStatusCode( 404 )
			endif
		endif
	endif

	lRet := oRest:setKeyHeaderResponse("Content-Type", "application/json")

return oRest:setResponse( ::jRetorno )


/*/{Protheus.doc} cApiFunctionCompany::PatchApiAlteraFunctionCompany() as json
Metodo Patch para atualizacao de registros na tabela ROTINA_EMPRESA
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/29/2023
@return variant, return_um objeto
/*/
method PatchApiAlteraFunctionCompany() as json class cApiFunctionCompany
	Local lRet	:= .T. 	as logical

	::jHeader := oRest:getHeaderRequest()
	if ( ::jHeader <> Nil )
		::cToken := ::jHeader[ 'Authorization' ]
	endif

	if lRet
		If .F. // !U_VTOKEN(::cToken) // VALIDO SE TOKEN E VALIDO RETIRAR DEPOIS DOS TESTES
			lRet := .F.
			::jRetorno := {"erro": "Token inválido", "codigo": 401}
			oRest:setStatusCode( 401 )
		endif
	endif

	if lRet
		::jBody := JsonObject():new()
		::jBody:fromJson( oRest:GetBodyRequest() )
		if !( ::jBody:HasProperty("itens") )
			lRet := .F.
			::jRetorno := {"erro": "Bad Request", "codigo": 400}
			oRest:setStatusCode( 400 )
		endif
	endif

	if lRet
		::AlteraFunctionCompany()
	endif

	lRet := oRest:setKeyHeaderResponse("Content-Type", "application/json")

return oRest:setResponse( ::jRetorno )


/*/{Protheus.doc} cApiFunctionCompany::AlteraFunctionCompany()
Altera registros na tabela ROTINA_EMPRESA
@type method
@version 12.1.2310
@author Eduardo Brust
@since 10/29/2023
/*/
method AlteraFunctionCompany() class cApiFunctionCompany
	Local cUpdate	:= ""	as character
	local nStatus	:=	0	as numeric
	Local i					as numeric
	local nErro		:=	0	as numeric
	Local cFunction := cCompany := cSigla := cAtivo := "" as character

	FOR I:= 1 TO len(::jBody["itens"])

		cFunction := IIF(::jBody["itens"][I]:GetJsonText("cFunction") == "null",'', ::jBody["itens"][I]:GetJsonText("cFunction"))
		cCompany := IIF(::jBody["itens"][I]:GetJsonText("cCompany") == "null",'', ::jBody["itens"][I]:GetJsonText("cCompany"))
		cSigla := IIF(::jBody["itens"][I]:GetJsonText("cSigla") == "null",'', ::jBody["itens"][I]:GetJsonText("cSigla"))
		cAtivo := IIF(::jBody["itens"][I]:GetJsonText("cAtivo") == "null",'', ::jBody["itens"][I]:GetJsonText("cAtivo"))
		
		cFunction := UPPER(ALLTRIM(cFunction))
		cCompany := ALLTRIM(cCompany) 
		cSigla := UPPER(ALLTRIM(cSigla))
		cAtivo := UPPER(ALLTRIM(cAtivo))

		IF !EMPTY(cFunction) .AND. !EMPTY(cCompany) .AND. (!EMPTY(cSigla) .OR.!EMPTY(cAtivo) )
			cUpdate := ""
			cUpdate += " UPDATE ROTINA_EMPRESA SET 		"+ CRLF
			IF !EMPTY(cSigla).AND. !EMPTY(cAtivo) .AND. cAtivo $ 'S/N'
				cUpdate += "   SIGLA = '" + cSigla + "', 	"+ CRLF
				cUpdate += "   ATIVO = '"+ cAtivo + "' 	"+ CRLF
			ELSEIF !EMPTY(cSigla)
				cUpdate += "   SIGLA = '" + cSigla + "'	"+ CRLF
			ELSEIF !EMPTY(cAtivo)
				cUpdate += "   ATIVO = '" + cAtivo + "'	"+ CRLF
			ENDIF
			cUpdate += " WHERE  UPPER(TRIM(CFUNCTION)) = '" + cFunction + "' 	"+ CRLF
			cUpdate += " AND  TRIM(COMPANY) = '" + cCompany + "' 	"+ CRLF

			nStatus := TCSQLExec(cUpdate)
			if nStatus < 0
				nErro++
			endif
		ENDIF
	NEXT

	if nErro > 0
		::jRetorno := {"erro": "Erro ao atualizar registros", "codigo": 500}
		oRest:setStatusCode( 500 )
	else
		::jRetorno := {"msg": "Sucesso", "codigo": 200}
		oRest:setStatusCode( 200 )
	endif
return

/*

https://tdn.totvs.com/display/tec/Reflection+e+Annotation

1. GET:
   - 200 (OK): A solicitação foi bem-sucedida e o corpo da resposta contém os dados solicitados.
   - 404 (Not Found): O recurso solicitado não foi encontrado.
   - 401 Unauthorized - Solicitacao recusada devido credenciais inválidas ou ausentes

2. POST:
   - 201 (Created): A solicitação foi bem-sucedida e um novo recurso foi criado.
   - 400 (Bad Request): A solicitação não pôde ser entendida ou contém parâmetros inválidos.
   - 409 (Conflict): O servidor detectou um conflito durante o processamento da solicitação, como um conflito de duplicação de recursos.

3. PUT:
   - 200 (OK): A solicitação foi bem-sucedida e o recurso foi atualizado.
   - 400 (Bad Request): A solicitação não pôde ser entendida ou contém parâmetros inválidos.
   - 404 (Not Found): O recurso a ser atualizado não foi encontrado.

4. PATCH:
   - 200 (OK): A solicitação foi bem-sucedida e o recurso foi atualizado.
   - 204 (No Content): A solicitação foi bem-sucedida e o recurso foi atualizado.
   - 400 (Bad Request): A solicitação não pôde ser entendida ou contém parâmetros inválidos.
   - 404 (Not Found): O recurso a ser atualizado não foi encontrado.

5. DELETE:
   - 204 (No Content): A solicitação foi bem-sucedida e o recurso foi excluído.
   - 404 (Not Found): O recurso a ser excluído não foi encontrado.

*/
