#include 'tlpp-core.th'
#include 'tlpp-rest.th'
#include "Totvs.ch"
#include "Topconn.ch"
#INCLUDE "PROTHEUS.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "FILEIO.CH"

/*

PROJETO INTEGRAÇÃO INOVA X PROTHEUS [ EDUARDO BRUST - 06/01/2022 ]

cIntegraOrquestra - Classe responsável por realizar a integração com o orquestra
dos títulos para desbloqueio por centro de custo
*/

CLASS cIntegraOrquestra // From LongNameClass

	//Propriedades da Classe
	PUBLIC Data nIdOrq		//Retorna o Id Orquestra

	//Métodos da classe
	PUBLIC METHOD New() CONSTRUCTOR    //responsavel por criar uma nova instancia do objeto da classe
	PUBLIC METHOD Destroy(_oObj)		//responsavel por destruir a instancia do objeto da classe em memoria
	PUBLIC METHOD ClearProp()			//responsável por Limpar as propriedades da classe cIntegraOrquestra para cada filial processada
	PUBLIC METHOD fIntOrq(a_Protheus,c_ChvTit,c_Integra)	//responsável por chamar a integração com o Orquestra
	PRIVATE METHOD fTpAProva(c_CC,c_GrpAprv,a_Grupos, n_VlrTit)	//responsável por retornar se a aprovação por usuário ou Centro de Custo
	PRIVATE METHOD fTrataData (d_DtConv) //responsável por fazer o tratamento de data
	PRIVATE METHOD fRetProc(c_Codigo)    //resposável por retornar o processo
	PRIVATE METHOD fConsWs(o_RstCli,c_Param,a_HdSai) //responsável por retorno do processmento

ENDCLASS

/*
Metodo construtor da classe
*/
Method New() CLASS cIntegraOrquestra

	::nIdOrq	:= 0 

Return Self


/*
Método responsável por Limpar as propriedades da classe cIntegraOrquestra para cada filial processada
*/
Method ClearProp() CLASS cIntegraOrquestra
	::nIdOrq	:= 0 
Return

/*
Metodo Destroy da classe
*/
Method Destroy(_oObj) CLASS cIntegraOrquestra
	FreeObj(_oObj)
Return Self

/*
Metodo responsável por chamar a integração com o Orquestra
*/
Method fIntOrq(a_Protheus,c_ChvTit,c_Integra) CLASS cIntegraOrquestra

	Local a_AreaSA2	:= SA2->(GetArea())
	Local a_HdSai	:= {}
	Local c_Param	:= ""
	Local c_Url		:= GetnewPar("MV_XURLORQ","http://10.10.0.221:94")
	Local c_Token 	:= U_TOKORQ(Alltrim(UsrRetName(__CUSERID)))
	Local nX		:= 0
	Local c_IdProc	:= ::fRetProc("SP") //método resposável por retornar o processo
	Local a_CposOrq := {}
	Local o_RstCli 	:= FWRest():New(c_Url)
	Local n_IDOrq	:= 0
	Local c_TipoApr	:= ""
	Local a_Aprovad	:= {}
	Local n_PosNum	:= aScan(a_Protheus,{|x|x[1] = "E2_NUM"})
	Local n_PosNat	:= aScan(a_Protheus,{|x|x[1] = "E2_NATUREZ"})
	Local n_PosForc	:= aScan(a_Protheus,{|x|x[1] = "E2_FORNECE"})
	Local n_PosForl	:= aScan(a_Protheus,{|x|x[1] = "E2_LOJA"})
	Local n_PosTipo	:= aScan(a_Protheus,{|x|x[1] = "E2_TIPO"})
	Local n_PosVlr	:= aScan(a_Protheus,{|x|x[1] = "E2_VALOR"})
	Local n_PosVct	:= aScan(a_Protheus,{|x|x[1] = "E2_VENCTO"})
	Local n_PosVcR	:= aScan(a_Protheus,{|x|x[1] = "E2_VENCREA"})
	Local n_PosEms	:= aScan(a_Protheus,{|x|x[1] = "E2_EMISSAO"})
	Local n_PosCC	:= aScan(a_Protheus,{|x|x[1] = "E2_CCUSTO"})
	Local n_PosGrA	:= aScan(a_Protheus,{|x|x[1] = "E2_XGRPG"})
	Local n_PosHst	:= aScan(a_Protheus,{|x|x[1] = "E2_HIST"})
	Local n_PosBco	:= aScan(a_Protheus,{|x|x[1] = "E2_XBCOF"})
	Local n_PosAge	:= aScan(a_Protheus,{|x|x[1] = "E2_XAGENF"})
	Local n_PosCnt	:= aScan(a_Protheus,{|x|x[1] = "E2_XCTAFO"})
	Local n_PosDCt	:= aScan(a_Protheus,{|x|x[1] = "E2_XDAC"})
	Local c_Nivel01	:= ""
	Local c_Nivel02	:= ""
	Local c_DescNat	:= ""
	Local c_DescCC	:= ""

	SA2->(DbSetOrder(1))////A2_FILIAL+A2_COD+A2_LOJA
	SA2->(DbSeek(xFilial("SA2")+a_Protheus[n_PosForc][2]+a_Protheus[n_PosForl][2]))

	c_TipoApr 	:= ::fTpAProva(a_Protheus[n_PosCC][2],a_Protheus[n_PosGrA][2],@a_Aprovad, a_Protheus[n_PosVlr][2])

	c_DescNat	:= Alltrim(Posicione("SED",1,xFilial("SED")+a_Protheus[n_PosNat][2],"ED_DESCRIC"))//ED_FILIAL+ED_CODIGO
	c_DescCC	:= Alltrim(Posicione("CTT",1,xFilial("CTT")+a_Protheus[n_PosCC][2] ,"CTT_DESC01"))//CTT_FILIAL+CTT_CUSTO

	//Campos no Orquestra e sua correspondencia no SE2
	Aadd(a_CposOrq,{"empresa"				,"C",cEmpAnt					})
	Aadd(a_CposOrq,{"descEmpresa"			,"C",FWEmpName(cEmpAnt)			})
	Aadd(a_CposOrq,{"filial"				,"C",cFilAnt					})
	Aadd(a_CposOrq,{"descFilial"			,"C",FWFilName(cEmpAnt,cFilAnt)	})
	Aadd(a_CposOrq,{"procedimentoIndevido"	,"C","Não"})// Campo Padrão
	Aadd(a_CposOrq,{"tipoDeRateio"			,"C","1 - Solicitação sem Rateio"		})// Campo Padrão
	Aadd(a_CposOrq,{"categoriaPagto"		,"C",c_Integra	})
	Aadd(a_CposOrq,{"tipo"          		,"C",a_Protheus[n_PosTipo][2]})
	Aadd(a_CposOrq,{"natureza"				,"C",a_Protheus[n_PosNat][2] })
	Aadd(a_CposOrq,{"nDoTitulo"				,"C",a_Protheus[n_PosNum][2] })
	Aadd(a_CposOrq,{"chaveTituloProtheus"	,"C",c_ChvTit})
	Aadd(a_CposOrq,{"descNatureza"			,"C",c_DescNat})
	Aadd(a_CposOrq,{"cpfcnpj"				,"C",SA2->A2_CGC})
	Aadd(a_CposOrq,{"nomeFornecedor"		,"C",SA2->A2_NOME})
	Aadd(a_CposOrq,{"codFornecedor"			,"C",a_Protheus[n_PosForc][2] })
	Aadd(a_CposOrq,{"loja"					,"C",a_Protheus[n_PosForl][2] })
	Aadd(a_CposOrq,{"valorTotal"			,"N",a_Protheus[n_PosVlr][2] })
	Aadd(a_CposOrq,{"valorRealDePagamento"	,"N",a_Protheus[n_PosVlr][2] })
	Aadd(a_CposOrq,{"vencimento"			,"C",::fTrataData(a_Protheus[n_PosVct][2])})
	Aadd(a_CposOrq,{"dataRealParaPagamento"	,"C",::fTrataData(a_Protheus[n_PosVcR][2])})
	Aadd(a_CposOrq,{"dtEmissao"				,"C",::fTrataData(a_Protheus[n_PosEms][2])})
	Aadd(a_CposOrq,{"historico"				,"C",a_Protheus[n_PosHst][2] })
	Aadd(a_CposOrq,{"centroDeCusto"			,"C",a_Protheus[n_PosCC][2] })
	Aadd(a_CposOrq,{"descCentroDeCusto"		,"C",c_DescCC})
	Aadd(a_CposOrq,{"possuiDesdobramentoParaPagamentoParcelamento"	,"C","Não"		})// Campo Padrão
	Aadd(a_CposOrq,{"banco"					,"C",a_Protheus[n_PosBco][2]})
	Aadd(a_CposOrq,{"agencia"				,"C",a_Protheus[n_PosAge][2]})
	Aadd(a_CposOrq,{"conta"					,"C",a_Protheus[n_PosCnt][2]})
	Aadd(a_CposOrq,{"digitoconta"			,"C",a_Protheus[n_PosDCt][2]})
	Aadd(a_CposOrq,{"tipoDeAprovacao"		,"C",c_TipoApr})
	Aadd(a_CposOrq,{"codProcesso"			,"C","0"})

	//Tratitivas para a Aprovadores
	If Len(a_Aprovad[1][2]) > 0

		Aadd(a_CposOrq,{"centroDeCustoNaturezaRateio"			,"C",Alltrim(a_Protheus[n_PosCC][2])+" - "+c_DescCC,1 })
		Aadd(a_CposOrq,{"codCentroDeCustoNaturezaRateio"		,"C",a_Protheus[n_PosCC][2],1 })
		Aadd(a_CposOrq,{"descCentroDeCustoNaturezaRateio"		,"C",c_DescCC,1})

		Aadd(a_CposOrq,{"naturezaRateio"		,"C",Alltrim(a_Protheus[n_PosNat][2])+" - "+c_DescNat,1 })
		Aadd(a_CposOrq,{"codNaturezaRateio"		,"C",a_Protheus[n_PosNat][2],1 })
		Aadd(a_CposOrq,{"descNaturezaRateio"	,"C",c_DescNat,1})

		For nX := 1 to Len(a_Aprovad[1][2])

			If a_Aprovad[1][2][nX][3] = "01"
				c_Nivel01 += IIF( Empty(c_Nivel01),"",";")+Alltrim(a_Aprovad[1][2][nX][4])
			ElseIf a_Aprovad[1][2][nX][3] = "02"
				c_Nivel02 += IIF( Empty(c_Nivel02),"",";")+Alltrim(a_Aprovad[1][2][nX][4])
			EndIf

		Next
		Aadd(a_CposOrq,{"aprovadores1Nivel"	,"C",c_Nivel01,1})
		Aadd(a_CposOrq,{"aprovadores2Nivel"	,"C",c_Nivel02,1})

		Aadd(a_CposOrq,{"percRateio"		,"N",100,1 })
		Aadd(a_CposOrq,{"vlrRateio"			,"N",a_Protheus[n_PosVlr][2],1 })

	EndIf

	aAdd(a_HdSai,'content-type: application/json; charset=UTF-8')
	aAdd(a_HdSai,'authorization: bearer '+c_Token)

	o_RstCli:setPath("/api/1.0/Instances")

	c_Param := '{'
	c_Param += '	"flow": {"Id": '+c_IdProc+'},
	c_Param += '	"Simulation": false,
	c_Param += '	"Values": [
	For nX := 1 to Len(a_CposOrq)
		c_Param += '{
		c_Param += '"Name": "'+a_CposOrq[nX][1]+'",'
		c_Param += '"Value":'
		If a_CposOrq[nX][2] = "C"
			c_Param += '"'+Alltrim(a_CposOrq[nX][3])+'"'
		Else
			c_Param += '"'+Alltrim(Transform(a_CposOrq[nX][3],"@E 999,999,999.99"))+'"'
		EndIf
		If Len(a_CposOrq[nX]) = 4
			c_Param += ',"codOrder": '+cValtoChar(a_CposOrq[nX][4])+' '
		EndIf
		c_Param += '},
	Next
	c_Param := SubStr(c_Param,1,Len(c_Param)-1)
	c_Param += '  ]
	c_Param += '}

	c_Param := EncodeUTF8(c_Param, "cp1252")
	n_IDOrq := ::fConsWs(@o_RstCli,c_Param,@a_HdSai)

	//Pego o Id Orquestra
	If n_IDOrq > 0
		::nIdOrq := n_IDOrq
	EndIf

	RestArea(a_AreaSA2)

Return Self

/*
Metodo responsável por retornar se a aprovação por usuário ou Centro de Custo
*/
Method fTpAProva(c_CC,c_GrpAprv,a_Grupos, n_VlrTit) CLASS cIntegraOrquestra

	Local a_RetOpc 	:= {"aprovação por usuário","aprovação por nível"}
	Local n_Opc		:= 1
	Local c_Query 	:= ""
	Local c_Alias
	Local c_FilSAL	:= xFilial("SAL")
	Local c_FilSAK	:= xFilial("SAK")
	Local a_Alc		:= {}
	Local c_Chave 	:= ""
	Local nX		:= 0
	Local nY		:= 0
	Local c_QryDHL	:= ""
	Local c_TrbDHL	:= Nil
	Local c_Perfil	:= ""
	Local a_Perfil	:= {}

	c_QryDHL := " Select distinct DHL_COD						"+CRLF
	c_QryDHL += " from "+RetSqlName("DHL")+" DHL 				"+CRLF
	c_QryDHL += " Where DHL.D_E_L_E_T_ = ' '					"+CRLF
	c_QryDHL += " AND DHL.DHL_FILIAL = '"+xFilial("DHL")+"'		"+CRLF
	c_QryDHL += " AND DHL_LIMMIN <= '"+cValToChar(n_VlrTit)+"' 	"+CRLF
	c_QryDHL += " AND DHL_LIMMAX >= '"+cValToChar(n_VlrTit)+"' 	"+CRLF
	c_QryDHL += " ORDER BY 1									"+CRLF

	c_TrbDHL := MPSysOpenQuery(c_QryDHL)

	If !(c_TrbDHL)->(Eof())
		(c_TrbDHL)->(dbEval({||c_Perfil += AllTrim((c_TrbDHL)->DHL_COD)+"|" }))
	EndIf

	IIF(Select(c_TrbDHL) >0 ,(c_TrbDHL)->(DbCloseArea()),)

	a_Perfil := StrTokArr(c_Perfil, "|")

	c_Query := " SELECT DISTINCT DBL.DBL_GRUPO||DBL.DBL_ITEM DBL_GRUPO"
	c_Query += " FROM "+RetSqlName("DBL")+" DBL
	c_Query += " WHERE DBL.D_E_L_E_T_ = ' '
	c_Query += " AND  DBL.DBL_FILIAL = '"+xFilial("DBL")+"'
	c_Query += " AND  DBL.DBL_CC = '"+c_CC+"'
	c_Query += " ORDER BY 1

	c_Alias := MPSysOpenQuery(c_Query)

	If !(c_Alias)->(Eof())
		(c_Alias)->(dbEval({|| Aadd(a_Grupos,{	(c_Alias)->DBL_GRUPO,;
			{}});
			}))
	Else
		Aadd(a_Grupos,{ c_GrpAprv,;
			{}})
	EndIF
	IIF(Select(c_Alias) >0 ,(c_Alias)->(DbCloseArea()),)

	SAL->(DbSetOrder(2))//AL_FILIAL+AL_COD+AL_NIVEL
	SAK->(DbSetOrder(1))//AK_FILIAL+AK_COD
	For nX :=1 to Len(a_Grupos)
		a_Alc := {}
		c_Chave := c_FilSAL+a_Grupos[nX][1]
		If SAL->(DbSeek(c_Chave))
			While !SAL->(Eof()) .And. c_Chave = SAL->AL_FILIAL+SAL->AL_COD
				If SAK->(DbSeek(c_FilSAK+SAL->AL_APROV))
					//If AllTrim(SAL->AL_PERFIL) $ c_Perfil .And. SAL->AL_FILIAL == cFilAnt
					If SAL->AL_FILIAL == cFilAnt
						If aScan(a_Perfil, {|x| AllTrim(x) == AllTrim(SAL->AL_PERFIL)}) > 0
							If !(Empty(AllTrim(SAK->AK_XCODSUB))) .And. SAK->AK_XINIFER <= Date() .And. SAK->AK_XFIMFER >= Date() .And. SAK->AK_XATIVO == "S"
								If SAK->(DbSeek(c_FilSAK+SAK->AK_XCODSUB))
									Aadd(a_Alc,{SAK->AK_COD,;	//1 - Cod Aprov
												SAK->AK_USER,;	//2 - Cod Usuario
												SAL->AL_NIVEL,;	//3 - Nivel
												SAK->AK_LOGIN,; //4 - AK_LOGIN
												SAK->AK_NOME,;	//5 - AK_NOME
												SAK->AK_LIMMIN,;//6 - AK_LIMMIN
												SAK->AK_LIMMAX,;//7 - AK_LIMMAX
												SAK->AK_LIMITE,;//8 - AK_LIMITE
												SAl->AL_TPLIBER;//9 - AL_TPLIBER
									})
								EndIf
							Else
								Aadd(a_Alc,{SAL->AL_APROV,;	//1 - Cod Aprov
								SAL->AL_USER,;	//2 - Cod Usuario
								SAL->AL_NIVEL,;	//3 - Nivel
								SAK->AK_LOGIN,; //4 - AK_LOGIN
								SAK->AK_NOME,;	//5 - AK_NOME
								SAK->AK_LIMMIN,;//6 - AK_LIMMIN
								SAK->AK_LIMMAX,;//7 - AK_LIMMAX
								SAK->AK_LIMITE,;//8 - AK_LIMITE
								SAl->AL_TPLIBER;//9 - AL_TPLIBER
								})
							EndIf
						EndIf
					EndIf
				EndIf
				SAL->(DbSkip())
			EndDo

			If Len(a_Alc) > 0
				a_Grupos[nX][2] := aClone(a_Alc)
				For nY :=  1 to Len(a_Alc)
					If a_Alc[nX][9] = "N"
						n_Opc := 2
					EndIf
				Next
			EndIf

		EndIf
	Next

Return a_RetOpc[n_Opc]


/*
Metodo responsável por fazer o tratamento de data
*/
Method fTrataData (d_DtConv) CLASS cIntegraOrquestra

	Local c_Ret	:= ""

	c_Ret += StrZero(day(d_DtConv),2)+"/"
	c_Ret += StrZero(Month(d_DtConv),2)+"/"
	c_Ret += cValtoChar(Year(d_DtConv))

Return c_Ret

/*
Metodo responsável por retornar o processo
*/
Method fRetProc(c_Codigo) CLASS cIntegraOrquestra

	Local c_Ret		:= ""
	Local c_Proc	:= SuperGetMV("MV_XXORQIT",.F.,"SP|75;APC|82")
	Local a_Tmp		:= StrTokArr(c_Proc, ';')
	Local a_Proc	:= {}
	Local n_Pos		:= 0

	Aeval(a_Tmp,{|x|Aadd(a_Proc,StrTokArr(x, '|'))})

	n_Pos := aScan(a_Proc,{|x|x[1] = c_Codigo})
	If n_Pos > 0
		c_Ret := a_Proc[n_Pos][2]
	EndIf

Return c_Ret

/*
Metodo responsável por retorno do processmento
*/
Method fConsWs(o_RstCli,c_Param,a_HdSai) CLASS cIntegraOrquestra

	Local n_Ret		:= 0
	Local o_obj
	Local l_ok		:= .F.
	Local _cRet		:= ""

	o_RstCli:SetPostParams(c_Param)

	l_ok := o_RstCli:Post(a_HdSai) //Verifica se houve erro de processamento


	If l_ok
		
		o_Obj := JsonObject():new()    ///FWJsonDeserialize(o_RstCli:GetResult(),@o_Obj)
		_cRet := o_Obj:fromJson(FwNoAccent(o_RstCli:GetResult()))	
		
		If ValType(_cRet) == "U"	
			//n_Ret :=  o_obj:GetJsonText("ID")   ////o_obj:ID
			n_Ret := o_obj:GetJsonObject('Id')
		Else	
		   MsgAlert("Erro ao incluir requisição no Orquestra: "+Alltrim(o_RstCli:cResult))
		EndIf
	Else
		MsgAlert("Erro ao incluir requisição no Orquestra: "+Alltrim(o_RstCli:cResult))
	EndIf

Return n_Ret
